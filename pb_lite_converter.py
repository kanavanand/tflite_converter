## -*- coding: utf-8 -*-
"""PB_lite_converter.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1rPdJhQzmvaYy_iAnxwbBrFlGNtdJoRXY

# Welcome to My colab ;)

#### [Documentation-](https://docs.google.com/document/d/1j-_7QNILUBYJq0h3u99sEotJIntOJAMc5mpf5_RJyaA/edit?usp=sharing)

       -Kanav Anand

## All packages are imported in this cell
"""

from google.colab import files
import time,sys,warnings,glob,random,cv2,base64,json,csv,os
import numpy as np
import tensorflow as tf
from tensorflow.python.framework import graph_util
import subprocess
import tempfile
import time,sys,warnings,glob,random,cv2,base64,json,csv,os
import numpy as np
from tensorflow.python.framework import graph_util

"""### Run this cell to upload a zip file containing


1.   .pb file 
2.   .Meta file(inclused all the checkpoint.)
"""




"""Run this cell to check the te name of the files present ,**make sure zip file you uploaded should be there**"""

#
"""Get the name of the file from above zip and extract it."""


"""**As you can clearly see the all the files are extracted in the folder named "FF_Check_k" which is the name of your zip. **

So our current working directory is the  above one:

# These are the inputs careflully fill according to the need.
"""

##input shape if the image 
img_size_x = 256
img_size=_y=256

##Directory where all the models are loacated
direc ="CD_Check_k/"
#####frozen moedl pb:

frozen_model_pb = 'CD_L_OD_19_RGB_squeeze_128_9may.pb'
#####checkpoint model with ckpt extension:

checkpoint_path="CD_Check_k/filename_CD.ckpt"
###### output file name:

###input tensor name



def load_graph(frozen_graph_filename):
    with tf.gfile.GFile(frozen_graph_filename, "rb") as f:
        graph_def = tf.GraphDef()
        graph_def.ParseFromString(f.read())
    with tf.Graph().as_default() as graph:
        

        tf.import_graph_def(
            graph_def, 
            input_map=None, 
            return_elements=None, 
            name="prefix", 
            op_dict=None, 
            producer_op_list=None
        )
        
    return graph
# This function tells the size of the file.
def convert_bytes(num):
    """
    this function will convert bytes to MB.... GB... etc
    """
    for x in ['bytes', 'KB', 'MB', 'GB', 'TB']:
        if num < 1024.0:
            return "%3.1f %s" % (num, x)
        num /= 1024.0


def file_size(file_path):
    """
    this function will return the file size
    """
    if os.path.isfile(file_path):
        file_info = os.stat(file_path)
        return convert_bytes(file_info.st_size)

"""# This is the main conversion section of this code.
Here you can modify the name of the tensors according to your need.
"""

def conversion(frozen_model,image_size_x,image_size_y,path,output_name,num_channels=3,input_tensor='prefix/input_node:0',output_tensor='prefix/output_node:0',download=True):
  e=time.time()
  out_name=frozen_model_pb[:-3]
  CD_graph = load_graph(direc+frozen_model_pb)  
  CD_input = CD_graph.get_tensor_by_name(input_tensor)
  CD_output = CD_graph.get_tensor_by_name(output_tensor)
  output_single = tf.identity(tf.nn.softmax(CD_output, axis=1), name="output_single")
  x_single = tf.placeholder(dtype=tf.float32, shape=[1,img_size,img_size,num_channels],
                                  name="input_node")
  tf.contrib.lite.tempfile = tempfile
  tf.contrib.lite.subprocess = subprocess
  print('************************CONVERTING TO THE TFLITE************************')
  with tf.Session(graph=CD_graph) as sess:
    saver = tf.train.import_meta_graph(checkpoint_path + ".meta", import_scope=None)
    saver.restore(sess, checkpoint_path)
    graph_def = tf.get_default_graph().as_graph_def()
    output_graph = graph_util.convert_variables_to_constants(sess, graph_def, ["output_single"])
    tflite_model = tf.contrib.lite.toco_convert(output_graph, input_tensors=[x_single], output_tensors=[output_single])
    with open('./'+out_name+'.tflite', "wb") as f:
      f.write(tflite_model)
  print('************************SUCCESSFULLY CONVERTED ************************')
  if (download):
    files.download(out_name+'.tflite')
    print('Download successfully')

def main():
  conversion(frozen_model_pb,img_size,direc,output_name=out_name,download=True)
  print("Done")

if __name__ == "__main__":
    s = time.time()
    main()
    e = time.time()
    print('time take :',e-s)
    print('The file you uploaded (.PB) size:',file_size(direc+frozen_model_pb))    
    print('The Tflite size :',file_size(out_name+'.tflite'))









